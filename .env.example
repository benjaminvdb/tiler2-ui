# ============================================================================
# Link Chat - Environment Configuration
# ============================================================================
#
# Setup Instructions:
# 1. Copy this file to `.env.local` for local development:
#    cp .env.example .env.local
#
# 2. Fill in the required values (marked with [REQUIRED])
#
# 3. Optional: Create environment-specific files:
#    - .env.development (development-specific overrides)
#    - .env.production (production-specific overrides)
#    - .env.test (test environment)
#
# 4. IMPORTANT: Never commit .env.local or any file containing real secrets!
#    These files are automatically ignored by .gitignore
#
# Environment Variable Prefixes:
# - NEXT_PUBLIC_* = Exposed to browser (client-side) - use for non-sensitive data only
# - No prefix = Server-side only - use for secrets and sensitive data
#
# Runtime Validation:
# This project uses @t3-oss/env-nextjs with Zod for type-safe runtime validation.
# See src/env.ts for the validation schema.
#
# Documentation:
# - Next.js: https://nextjs.org/docs/pages/guides/environment-variables
# - Auth0: https://auth0.com/docs/quickstart/webapp/nextjs
# - LangGraph: https://langchain-ai.github.io/langgraph/
# - Sentry: https://docs.sentry.io/platforms/javascript/guides/nextjs/
# ============================================================================


# ============================================================================
# CORE CONFIGURATION
# ============================================================================

# [OPTIONAL] Application Base URL
# The base URL where your application is hosted
# Used for Auth0 callbacks and redirects
# Default: http://localhost:3000 (development)
# Production example: https://your-app.vercel.app
APP_BASE_URL='http://localhost:3000'

# [OPTIONAL] Node Environment
# Automatically set by Next.js and hosting platforms
# Values: development | production | test
# You typically don't need to set this manually
# NODE_ENV=development


# ============================================================================
# LANGGRAPH CONFIGURATION
# ============================================================================
# Connect to your LangGraph server for AI agent interactions
# Documentation: https://langchain-ai.github.io/langgraph/

# [OPTIONAL] LangGraph API URL (Client-side)
# The URL of your LangGraph server that the frontend connects to
# If not set, users will be prompted to enter it in the configuration form
# Development: http://localhost:2024
# Production: https://your-agent.default.us.langgraph.app
NEXT_PUBLIC_API_URL=http://localhost:2024

# [OPTIONAL] Assistant/Graph ID (Client-side)
# The name of the graph or ID of the assistant to use
# If not set, users will be prompted to enter it in the configuration form
# Default: agent
NEXT_PUBLIC_ASSISTANT_ID=agent

# [OPTIONAL] LangSmith API Key (Server-side)
# Used for tracing, monitoring, and debugging LangGraph operations
# Get your API key from: https://smith.langchain.com/settings
# DO NOT prefix with "NEXT_PUBLIC_" - this is a server-side secret
# Format: lsv2_pt_...
LANGSMITH_API_KEY=


# ============================================================================
# LANGSMITH TRACING CONFIGURATION (Optional)
# ============================================================================
# Advanced LangSmith configuration for detailed tracing
# Documentation: https://docs.smith.langchain.com/

# [OPTIONAL] LangChain API Endpoint
# The API endpoint for LangSmith tracing
# Default: https://api.smith.langchain.com (US)
# EU: https://eu.api.smith.langchain.com
# Only needed if you want to use EU region or custom endpoint
# LANGCHAIN_ENDPOINT=https://eu.api.smith.langchain.com

# [OPTIONAL] Enable LangChain Tracing v2
# Set to "true" to enable detailed tracing of LangChain operations
# Default: false
# LANGCHAIN_TRACING_V2=true

# [OPTIONAL] LangSmith Project Name
# The project name in LangSmith where traces will be sent
# Default: Uses default project if not specified
# LANGSMITH_PROJECT=your-project-name


# ============================================================================
# AUTHENTICATION - AUTH0
# ============================================================================
# Auth0 configuration for user authentication
# Setup guide: https://auth0.com/docs/quickstart/webapp/nextjs
# Dashboard: https://manage.auth0.com/

# [REQUIRED] Auth0 Secret
# A random string used to encrypt session cookies
# MUST be at least 32 characters long
# Generate using: openssl rand -hex 32
AUTH0_SECRET='your-secret-here'

# [REQUIRED] Auth0 Domain
# Your Auth0 tenant domain
# Format: your-tenant.auth0.com or your-tenant.us.auth0.com
# Find it in: Auth0 Dashboard → Applications → Settings
AUTH0_DOMAIN='your-domain.auth0.com'

# [REQUIRED] Auth0 Client ID
# Your Auth0 application's client ID
# Find it in: Auth0 Dashboard → Applications → Settings
AUTH0_CLIENT_ID='your-client-id'

# [REQUIRED] Auth0 Client Secret
# Your Auth0 application's client secret
# Find it in: Auth0 Dashboard → Applications → Settings
# IMPORTANT: Keep this secret! Never expose to the client
AUTH0_CLIENT_SECRET='your-client-secret'

# [OPTIONAL] Auth0 Audience
# API identifier for custom Auth0 APIs
# Only needed if you have a custom API configured in Auth0
# Find it in: Auth0 Dashboard → APIs → Your API → Settings
# Format: https://your-api-audience.com
# AUTH0_AUDIENCE='https://your-api-audience.com'


# ============================================================================
# MONITORING & ERROR REPORTING
# ============================================================================

# -----------------------------------------------------------------------------
# Sentry (Primary Error Reporting)
# -----------------------------------------------------------------------------
# Sentry provides error tracking, performance monitoring, and session replay
# Documentation: https://docs.sentry.io/platforms/javascript/guides/nextjs/
# Dashboard: https://sentry.io/
#
# IMPORTANT: Sentry is COMPLETELY DISABLED in development (NODE_ENV=development)
# - Sentry.init() is NOT called at all in development - zero network requests
# - All logs go to console only - no data sent to Sentry
# - Sentry only initializes when: (1) NODE_ENV != 'development' AND (2) SENTRY_DSN is set
#
# Project Configuration:
# - Organization: link-nature
# - Project: link-ai-frontend
# - Tunnel route: /monitoring (bypasses ad-blockers)
# - Session Replay: 10% sessions, 100% on error
# - Performance monitoring enabled

# [OPTIONAL] Sentry DSN (Server-side)
# Server-side Data Source Name for error reporting
# Get from: https://sentry.io/settings/{org}/projects/{project}/keys/
# Used for server and edge runtime error tracking
# SENTRY_DSN='https://your-key@o0.ingest.sentry.io/project-id'

# [OPTIONAL] Sentry DSN (Client-side)
# Client-side Data Source Name for browser error reporting
# Can be the same as SENTRY_DSN or a separate key
# NEXT_PUBLIC_SENTRY_DSN='https://your-key@o0.ingest.sentry.io/project-id'

# [OPTIONAL] Sentry Auth Token (Build-time)
# Required for uploading source maps during production builds
# This enables readable stack traces in Sentry
# Get from: https://sentry.io/settings/account/api/auth-tokens/
# Required scopes: project:read, project:releases, org:read
# SENTRY_AUTH_TOKEN='sntrys_your-token-here'

# [OPTIONAL] Sentry Environment
# Environment name for filtering events in Sentry
# Default: Inherits from NODE_ENV (development/production/test)
# Custom values: staging, preview, etc.
# SENTRY_ENVIRONMENT='production'

# -----------------------------------------------------------------------------
# Alternative Error Reporting Services (Optional)
# -----------------------------------------------------------------------------
# The application supports multiple error reporting services.
# Configure ONLY the services you actively use to avoid performance overhead.
# Note: These are not validated in src/env.ts - they're optional fallbacks

# DataDog - Application Performance Monitoring
# Documentation: https://docs.datadoghq.com/
# DATADOG_API_KEY='your-datadog-api-key'

# LogRocket - Session Replay & Error Tracking
# Documentation: https://docs.logrocket.com/
# LOGROCKET_APP_ID='your-logrocket-app-id'

# Bugsnag - Error Monitoring
# Documentation: https://docs.bugsnag.com/
# BUGSNAG_API_KEY='your-bugsnag-api-key'

# Custom Error Webhook - Send errors to your own endpoint
# ERROR_WEBHOOK_URL='https://your-custom-webhook.com/errors'
# ERROR_WEBHOOK_API_KEY='your-webhook-api-key'

# -----------------------------------------------------------------------------
# Error Reporting Configuration
# -----------------------------------------------------------------------------

# [OPTIONAL] Enable Console Logging in Production
# Set to 'true' to also log errors to console in production
# Default: false (console logging only in development)
# ENABLE_CONSOLE_LOGGING=false

# [OPTIONAL] Enable Performance Tracking
# Set to 'true' to enable performance monitoring
# Default: false
# ENABLE_PERFORMANCE_TRACKING=true

# [OPTIONAL] Maximum Errors Per Session
# Limit the number of errors sent per user session to prevent spam
# Default: 100
# MAX_ERRORS_PER_SESSION=100


# ============================================================================
# FEATURE FLAGS
# ============================================================================
# Optional feature toggles to control application behavior

# [OPTIONAL] Hide Tool Calls Toggle (Client-side)
# Controls visibility of the tool calls toggle in the chat interface
# Set to "false" to show the toggle that lets users hide/show tool calls
# Any other value (including "true" or leaving unset) will hide the toggle
# Default: Hidden (toggle not shown)
# NEXT_PUBLIC_HIDE_TOOL_CALLS=true


# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
# Server-side logging using Pino
# Documentation: https://github.com/pinojs/pino

# [OPTIONAL] Log Level
# Controls the verbosity of server-side logs
# Values: debug | info | warn | error | fatal
# Default: info
# - debug: Detailed debugging information
# - info: General informational messages
# - warn: Warning messages
# - error: Error messages
# - fatal: Fatal errors that cause app termination
LOG_LEVEL=info

# [OPTIONAL] Pretty Print Logs
# Enable human-readable log formatting in development
# Values: true | false
# Default: true (automatically enabled in development)
# Set to 'false' for JSON logs (better for production log aggregation)
LOG_PRETTY=true


# ============================================================================
# DEVELOPMENT & BUILD TOOLS
# ============================================================================
# Optional configuration for development and build processes

# [OPTIONAL] Skip Environment Validation
# Set to 'true' to skip environment variable validation during builds
# Useful for CI/CD pipelines or when you know variables will be set at runtime
# Default: false (validation enabled)
# Use with caution - skipping validation can lead to runtime errors
# SKIP_ENV_VALIDATION=false

# [OPTIONAL] Bundle Analyzer
# Set to 'true' to analyze bundle size during build
# Run with: ANALYZE=true pnpm build
# Opens interactive visualization of bundle composition
# ANALYZE=false

# [OPTIONAL] CI Environment
# Automatically set by CI/CD platforms (GitHub Actions, GitLab CI, etc.)
# Used to adjust build behavior (e.g., Sentry logging verbosity)
# You don't need to set this manually
# CI=true


# ============================================================================
# PRODUCTION DEPLOYMENT EXAMPLES
# ============================================================================
# Example configurations for different deployment scenarios

# Example 1: Local Development with LangGraph Studio
# NEXT_PUBLIC_API_URL=http://localhost:2024
# NEXT_PUBLIC_ASSISTANT_ID=agent
# APP_BASE_URL=http://localhost:3000
# NEXT_PUBLIC_HIDE_TOOL_CALLS=true

# Example 2: Production with Auth0 + LangGraph Cloud + LangSmith Tracing
# NEXT_PUBLIC_API_URL=https://my-agent.default.us.langgraph.app
# NEXT_PUBLIC_ASSISTANT_ID=agent
# APP_BASE_URL=https://my-app.vercel.app
# AUTH0_SECRET='[generated-32-char-secret]'
# AUTH0_DOMAIN='my-tenant.auth0.com'
# AUTH0_CLIENT_ID='[your-client-id]'
# AUTH0_CLIENT_SECRET='[your-client-secret]'
# LANGSMITH_API_KEY='lsv2_pt_...'
# LANGCHAIN_ENDPOINT='https://eu.api.smith.langchain.com'
# LANGCHAIN_TRACING_V2=true
# LANGSMITH_PROJECT='my-production-project'
# SENTRY_DSN='https://...@sentry.io/...'
# NEXT_PUBLIC_HIDE_TOOL_CALLS=true

# Example 3: Staging Environment
# NEXT_PUBLIC_API_URL=https://staging-agent.langgraph.app
# NEXT_PUBLIC_ASSISTANT_ID=agent
# APP_BASE_URL=https://staging.my-app.com
# SENTRY_ENVIRONMENT=staging
# LANGSMITH_PROJECT='my-staging-project'
# NEXT_PUBLIC_HIDE_TOOL_CALLS=false


# ============================================================================
# SECURITY NOTES
# ============================================================================
# ⚠️  CRITICAL SECURITY REMINDERS:
#
# 1. NEVER commit .env.local, .env.production.local, or any file with real secrets
# 2. Only use NEXT_PUBLIC_ prefix for non-sensitive data (visible to users)
# 3. Keep server-side secrets without the NEXT_PUBLIC_ prefix
# 4. Rotate secrets regularly (especially AUTH0_SECRET and API keys)
# 5. Use different Auth0 applications for development and production
# 6. Generate AUTH0_SECRET with: openssl rand -hex 32
# 7. Review .gitignore to ensure sensitive files are excluded
# 8. For production, use environment variables in your hosting platform
#    (Vercel, Netlify, etc.) instead of committing .env files
#
# Files automatically ignored by .gitignore:
# - .env.local
# - .env.*.local
# - .env.production
# - .env.development
# ============================================================================
